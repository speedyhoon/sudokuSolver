package main

import (
	"fmt"
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestPuzzle_Solve(t *testing.T) {
	tests := []struct {
		input [mx]string
		want  string
	}{
		{
			input: [mx]string{
				" 654     ",
				" 3   5 76",
				"       2 ",
				"7  8   61",
				"     62  ",
				" 1    4  ",
				" 7   4 53",
				"      1  ",
				"8   9    ",
			},
			want: `___________________
[2 6 5 4 7 8 3 1 9]
[4 3 1 9 2 5 8 7 6]
[9 8 7 6 1 3 5 2 4]
[7 4 3 8 5 2 9 6 1]
[5 9 8 1 4 6 2 3 7]
[6 1 2 7 3 9 4 8 5]
[1 7 9 2 8 4 6 5 3]
[3 2 4 5 6 7 1 9 8]
[8 5 6 3 9 1 7 4 2]
___________________
unsolved cell quantity: 0
`,
		},
		{
			input: [mx]string{
				" 5     1 ",
				"3 2   9 7",
				" 6 9 7 5 ",
				"  86 17  ",
				"    3    ",
				"  58 94  ",
				" 7 5 3 9 ",
				"5 4   3 1",
				" 1     2 ",
			},
			want: `___________________
[7 5 9 3 4 2 6 1 8]
[3 8 2 1 5 6 9 4 7]
[4 6 1 9 8 7 2 5 3]
[9 4 8 6 2 1 7 3 5]
[6 2 7 4 3 5 1 8 9]
[1 3 5 8 7 9 4 6 2]
[2 7 6 5 1 3 8 9 4]
[5 9 4 2 6 8 3 7 1]
[8 1 3 7 9 4 5 2 6]
___________________
unsolved cell quantity: 0
`,
		},
		{
			input: [mx]string{
				"   5 9  6",
				" 1       ",
				"54 8   9 ",
				"89 4   6 ",
				"    2 3  ",
				"  7      ",
				"  67     ",
				"  1    5 ",
				"75  4 9 2",
			},
			want: `___________________
[3 7 8 5 1 9 4 2 6]
[6 1 9 2 3 4 7 8 5]
[5 4 2 8 6 7 1 9 3]
[8 9 5 4 7 3 2 6 1]
[1 6 4 9 2 5 3 7 8]
[2 3 7 1 8 6 5 4 9]
[9 2 6 7 5 1 8 3 4]
[4 8 1 3 9 2 6 5 7]
[7 5 3 6 4 8 9 1 2]
___________________
unsolved cell quantity: 0
`,
		},
		/*{

					input: [mx]string{
						"  1     8",
						" 2  9 5 6",
						"9  4     ",
						"  7  1   ",
						"       3 ",
						" 6  4 2 9",
						" 3     4 ",
						"    5  8 ",
						"  67  3 5",
					},
					want: `___________________
		[3 7 8 5 1 9 4 2 6]
		[6 1 9 2 3 4 7 8 5]
		[5 4 2 8 6 7 1 9 3]
		[8 9 5 4 7 3 2 6 1]
		[1 6 4 9 2 5 3 7 8]
		[2 3 7 1 8 6 5 4 9]
		[9 2 6 7 5 1 8 3 4]
		[4 8 1 3 9 2 6 5 7]
		[7 5 3 6 4 8 9 1 2]
		___________________
		unsolved cell quantity: 0
		`,
				},
				{
					input: [mx]string{
						" 4 8    5",
						" 9     3 ",
						"3 8  7  2",
						" 3    9  ",
						"    6   7",
						"1 59   2 ",
						"     95  ",
						"  4      ",
						"8 25   1 ",
					},
					want: `___________________
		[3 7 8 5 1 9 4 2 6]
		[6 1 9 2 3 4 7 8 5]
		[5 4 2 8 6 7 1 9 3]
		[8 9 5 4 7 3 2 6 1]
		[1 6 4 9 2 5 3 7 8]
		[2 3 7 1 8 6 5 4 9]
		[9 2 6 7 5 1 8 3 4]
		[4 8 1 3 9 2 6 5 7]
		[7 5 3 6 4 8 9 1 2]
		___________________
		unsolved cell quantity: 0
		`,
				},*/
	}
	for i, tt := range tests {
		t.Run(fmt.Sprintf("test_%d", i), func(t *testing.T) {
			p := Load(
				tt.input[0], tt.input[1], tt.input[2],
				tt.input[3], tt.input[4], tt.input[5],
				tt.input[6], tt.input[7], tt.input[8],
			)
			p.Solve()
			assert.Equal(t, 0, p.UnsolvedCells())
			assert.Equal(t, tt.want, p.Printer())
		})
	}
}
